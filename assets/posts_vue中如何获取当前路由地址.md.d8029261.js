import{_ as s,c as a,o as e,a as n}from"./app.4feed8ca.js";const l="/klein/router.png",t="/klein/router1.png",o="/klein/router2.png",i="/klein/router3.png",p="/klein/router4.png",r="/klein/router5.png",c="/klein/router6.png",u="/klein/router7.png",d="/klein/router8.png",D=JSON.parse('{"title":"vue中如何获取当前路由地址","description":"vue中如何获取当前路由地址","frontmatter":{"title":"vue中如何获取当前路由地址","description":"vue中如何获取当前路由地址","aside":false,"date":"2023-01-16T00:00:00.000Z","tags":["vue"]},"headers":[{"level":2,"title":"router和$route的区别","slug":"router和-route的区别","link":"#router和-route的区别","children":[]},{"level":2,"title":"获取当前路由地址","slug":"获取当前路由地址","link":"#获取当前路由地址","children":[]},{"level":2,"title":"获取路由参数（query/params传参）","slug":"获取路由参数-query-params传参","link":"#获取路由参数-query-params传参","children":[{"level":3,"title":"query传参时：","slug":"query传参时","link":"#query传参时","children":[]},{"level":3,"title":"params传参时：","slug":"params传参时","link":"#params传参时","children":[]}]},{"level":2,"title":"方式一：window.location","slug":"方式一-window-location","link":"#方式一-window-location","children":[]},{"level":2,"title":"方式二：vue-router","slug":"方式二-vue-router","link":"#方式二-vue-router","children":[{"level":3,"title":"1.this.$route的内容：","slug":"_1-this-route的内容","link":"#_1-this-route的内容","children":[]},{"level":3,"title":"2.实时获取route地址并根据地址做处理","slug":"_2-实时获取route地址并根据地址做处理","link":"#_2-实时获取route地址并根据地址做处理","children":[]}]}],"relativePath":"posts/vue中如何获取当前路由地址.md"}'),h={name:"posts/vue中如何获取当前路由地址.md"},C=n(`<h1 id="一、vue获取当前路由地址" tabindex="-1">一、vue获取当前路由地址 <a class="header-anchor" href="#一、vue获取当前路由地址" aria-hidden="true">#</a></h1><h2 id="router和-route的区别" tabindex="-1">router和$route的区别 <a class="header-anchor" href="#router和-route的区别" aria-hidden="true">#</a></h2><ul><li>$router: 路由操作对象，只写。需要对路由进行操作时使用。如路由跳转</li><li>$route: 路由信息对象，只读。获取路由相关信息时使用。如获取当前路由地址</li></ul><h2 id="获取当前路由地址" tabindex="-1">获取当前路由地址 <a class="header-anchor" href="#获取当前路由地址" aria-hidden="true">#</a></h2><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">this.$route.path</span></span>
<span class="line"></span></code></pre></div><ul><li>原生方法：</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">window.location.href</span></span>
<span class="line"></span></code></pre></div><h2 id="获取路由参数-query-params传参" tabindex="-1">获取路由参数（query/params传参） <a class="header-anchor" href="#获取路由参数-query-params传参" aria-hidden="true">#</a></h2><h3 id="query传参时" tabindex="-1">query传参时： <a class="header-anchor" href="#query传参时" aria-hidden="true">#</a></h3><ul><li>路由跳转：</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">this.$router.push({ name: &#39;name&#39;, query: { id: &#39;123&#39;, data: &#39;456&#39; } })</span></span>
<span class="line"></span></code></pre></div><ul><li>获取参数：</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">this.$route.query</span></span>
<span class="line"></span></code></pre></div><h3 id="params传参时" tabindex="-1">params传参时： <a class="header-anchor" href="#params传参时" aria-hidden="true">#</a></h3><ul><li>路由跳转：</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">this.$router.push({ name: &#39;name&#39;, params: { id: &#39;123&#39;, data: &#39;456&#39; } })</span></span>
<span class="line"></span></code></pre></div><ul><li>获取参数：</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">this.$route.params</span></span>
<span class="line"></span></code></pre></div><hr><h1 id="二、vue实时获取路由地址" tabindex="-1">二、vue实时获取路由地址 <a class="header-anchor" href="#二、vue实时获取路由地址" aria-hidden="true">#</a></h1><h2 id="方式一-window-location" tabindex="-1">方式一：window.location <a class="header-anchor" href="#方式一-window-location" aria-hidden="true">#</a></h2><ul><li>测试网址：<a href="https://sso-test.digitalblockland.com:8080/offcial/home?id=123&amp;username=xxx" target="_blank" rel="noreferrer">https://sso-test.digitalblockland.com:8080/offcial/home?id=123&amp;username=xxx</a></li></ul><p>1.window.location.href（当前URL）</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">结果：https://sso-test.digitalblockland.com:8080/offcial/home?id=123&amp;username=xxx</span></span>
<span class="line"></span></code></pre></div><p>2.window.location.protocol（协议）</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">结果：https</span></span>
<span class="line"></span></code></pre></div><p>3.window.location.host（域名 + 端口）</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">结果：sso-test.digitalblockland.com:8080</span></span>
<span class="line"></span></code></pre></div><p>4.window.location.hostname（域名）</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">结果：sso-test.digitalblockland.com</span></span>
<span class="line"></span></code></pre></div><p>5.window.location.port（端口）</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">结果：8080</span></span>
<span class="line"></span></code></pre></div><p>6.window.location.pathname（路径部分）</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">结果：/offcial/home</span></span>
<span class="line"></span></code></pre></div><p>7.window.location.search（请求的参数）</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">结果：?id=123&amp;username=xxx</span></span>
<span class="line"></span></code></pre></div><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">let url=&quot;www.baidu.com?a=1&amp;b=2&amp;C=3&quot;;//测试地址</span></span>
<span class="line"><span style="color:#A6ACCD;">/*分析：最前面是?或&amp;，紧跟着除 ?&amp;#以外的字符若干，然后再等号，最后再跟着除 ?&amp;#以外的字符，并且要分组捕获到【除?&amp;#以外的字符】*/</span></span>
<span class="line"><span style="color:#A6ACCD;">let reg=/[?&amp;]([^?&amp;#]+)=([^?&amp;#]+)/g;</span></span>
<span class="line"><span style="color:#A6ACCD;">let param={};</span></span>
<span class="line"><span style="color:#A6ACCD;">let ret =  reg.exec(url);</span></span>
<span class="line"><span style="color:#A6ACCD;">while(ret){//当ret为null时表示已经匹配到最后了，直接跳出</span></span>
<span class="line"><span style="color:#A6ACCD;">  param[ret[1]]=ret[2];</span></span>
<span class="line"><span style="color:#A6ACCD;">  ret = reg.exec(url);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(param)</span></span>
<span class="line"></span></code></pre></div><p>8.window.location.origin（&#39;?&#39;前边的URL）</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">结果：https://sso-test.digitalblockland.com:8080/offcial/home</span></span>
<span class="line"></span></code></pre></div><p>9.window.location.hash（获取#之后的内容）</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">结果：null</span></span>
<span class="line"></span></code></pre></div><h2 id="方式二-vue-router" tabindex="-1">方式二：vue-router <a class="header-anchor" href="#方式二-vue-router" aria-hidden="true">#</a></h2><h3 id="_1-this-route的内容" tabindex="-1">1.this.$route的内容： <a class="header-anchor" href="#_1-this-route的内容" aria-hidden="true">#</a></h3><p><img src="`+l+'" alt=""></p><h4 id="_1-this-route-fullpath" tabindex="-1">（1）this.$route.fullPath: <a class="header-anchor" href="#_1-this-route-fullpath" aria-hidden="true">#</a></h4><ul><li>完成解析后的 URL，包含查询参数和 hash 的完整路径，即 “端口号/#” 之后的内容。 <img src="'+t+'" alt=""></li></ul><h4 id="_2-this-route-hash" tabindex="-1">（2）this.$route.hash <a class="header-anchor" href="#_2-this-route-hash" aria-hidden="true">#</a></h4><ul><li>当前路由的 hash 值 (带 #) ，如果没有 hash 值，则为空字符串。</li></ul><h4 id="_3-this-route-matched" tabindex="-1">（3）this.$route.matched <a class="header-anchor" href="#_3-this-route-matched" aria-hidden="true">#</a></h4><ul><li>官网说明：一个数组，包含当前路由的所有嵌套路径片段的路由记录 。路由记录就是 routes 配置数组中的对象副本 (还有在 children 数组)。 <img src="'+o+'" alt=""></li></ul><h4 id="_4-this-route-meta、this-route-name" tabindex="-1">（4）this.$route.meta、<a href="http://this.$route.name" target="_blank" rel="noreferrer">this.$route.name</a> <a class="header-anchor" href="#_4-this-route-meta、this-route-name" aria-hidden="true">#</a></h4><p><img src="'+i+'" alt=""><img src="'+p+'" alt=""></p><h4 id="_5-this-route-name" tabindex="-1">（5）<a href="http://this.$route.name" target="_blank" rel="noreferrer">this.$route.name</a> <a class="header-anchor" href="#_5-this-route-name" aria-hidden="true">#</a></h4><ul><li>当前路由的名称，如果有的话。</li></ul><h4 id="_6-this-route-params" tabindex="-1">（6）this.$route.params <a class="header-anchor" href="#_6-this-route-params" aria-hidden="true">#</a></h4><ul><li>一个 key/value 对象，包含了动态片段和全匹配片段，如果没有路由参数，就是一个空对象。 <img src="'+r+'" alt=""><img src="'+c+'" alt=""></li></ul><h4 id="_7-this-route-query" tabindex="-1">（7）this.$route.query <a class="header-anchor" href="#_7-this-route-query" aria-hidden="true">#</a></h4><ul><li>一个 key/value 对象，表示 URL 查询参数。如果没有查询参数，则是个空对象。 <img src="'+u+'" alt=""><img src="'+d+`" alt=""></li></ul><h3 id="_2-实时获取route地址并根据地址做处理" tabindex="-1">2.实时获取route地址并根据地址做处理 <a class="header-anchor" href="#_2-实时获取route地址并根据地址做处理" aria-hidden="true">#</a></h3><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">watch: {</span></span>
<span class="line"><span style="color:#A6ACCD;">  $route(val) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    //val即是this.$route</span></span>
<span class="line"><span style="color:#A6ACCD;">    //根据路由控制其他参数做不同处理</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (val.path == &quot;/xinyidai&quot;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      this.isCur = 5;</span></span>
<span class="line"><span style="color:#A6ACCD;">    } else if (val.path == &quot;/fiProduct&quot; || val.path == &quot;/fiProductDetail&quot;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      this.isCur = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">    } else if (val.path == &quot;/fiProductBx&quot; ||val.path == &quot;/fiProductBxDetail&quot;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      this.isCur = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">    } else if (val.path == &quot;/stock&quot; || val.path == &quot;/stockDetail&quot;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      this.isCur = 4;</span></span>
<span class="line"><span style="color:#A6ACCD;">    } else {</span></span>
<span class="line"><span style="color:#A6ACCD;">      this.isCur = &quot;&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">},</span></span>
<span class="line"></span></code></pre></div>`,60),v=[C];function y(g,m,A,_,b,f){return e(),a("div",null,v)}const x=s(h,[["render",y]]);export{D as __pageData,x as default};
